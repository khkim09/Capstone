digraph "InventoryItemUI.Setup"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,fontname=Consolas fontsize=10 style=filled height=0.2 width=0.4 margin=0.1];
  rankdir="LR";
  Node1 [id="Node000001",label="InventoryItemUI.Setup",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="StoredItem 데이터를 받아 UI를 초기화합니다."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="TradableItem.GetCurrentPrice",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_tradable_item.html#ab67b178b6fde23d719e4a20964e58499",tooltip="현재 가격을 반환합니다. 아직 초기화되지 않았다면 RecalculatePrice()를 호출하여 basePrice ± fluctuation 범위에서 랜덤으로 결정한 후,..."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="TradableItem.Recalculate\lPrice",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_tradable_item.html#a489fb9d4a846f4e4f0fc245c1eb39a29",tooltip="외부에서 가격을 갱신할 필요가 있을 때 호출합니다. basePrice ± fluctuation 범위 내에서 새로 랜덤으로 가격을 계산합니다. 음수가 되지 않도록 보정합니다."];
}
